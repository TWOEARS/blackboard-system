classdef SegmentationHypothesis < Hypothesis
    % SEGMENTATIONHYPOTHESIS This class represents the segmentation results
    %   that have been generated by SegmentationKS for one particular sound
    %   source. The hypothesis will be represented as a "soft-mask", which
    %   is generated by performing clustering on the segmentation results.
    %
    % AUTHORS:
    %   Christopher Schymura (christopher.schymura@rub.de)
    %   Cognitive Signal Processing Group
    %   Ruhr-Universitaet Bochum
    %   Universitaetsstr. 150, 44801 Bochum    
    
    properties (SetAccess = private)
        sourceIdentifier            % Unique identifier of the particular 
                                    % sound source represented by this
                                    % hypothesis.
        softMask                    % Probabilistic segmentation mask 
                                    % associated with this sound source.
    end
    
    methods
        function obj = SegmentationHypothesis(sourceIdentifier, softMask)
            % SEGMENTATIONHYPOTHESIS This constructor function is used to
            %   generate a new segmentation hypothesis on the blackboard.
            %
            % REQUIRED INPUTS:
            %   sourceIdentifier - Unique hash string, that was generated
            %       by the Segmentation KS.
            %   softMask - The probabilistic segmentation mask, specified
            %       as a NxM matrix, where N is the number of frames and M
            %       is the number of filterbank channels.
            
            % Check inputs
            p = inputParser();
            
            p.addRequired('sourceIdentifier', @isstr);
            p.addRequired('softMask', @(x) validateattributes(x, ...
                {'numeric'}, {'real', '2d', '>=', 0, '<=', 1}));
            p.parse(sourceIdentifier, softMask);
            
            % Add parameters to object properties
            obj.sourceIdentifier = p.Results.sourceIdentifier;
            obj.softMask = p.Results.softMask;
        end
    end
end
